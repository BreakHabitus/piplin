(def bit-not [b]
  (->> b
    (deserialize (anontype :boolean))
    not
    serialize))

(defmodule johnson
  [:inputs [dir (anontype :boolean)]
   :outputs [q (cast (bits 4) 0)]]
  (if dir
    (let [new-q (bit-cat (bit-slice q 1 4)
                         (bit-not (bit-slice q 0 1)))]
      (connect q new-q))
    (let [new-q (bit-cat (bit-not (bit-slice q 3 4))
                         (bit-slice q 0 3))]
      (connect q new-q))))

===

module johnson(
  clock,
  reset,
  dir,
  q
);
  input wire clock;
  input wire reset;

  input wire dir;
  output reg [3:0] q;

  wire q_slice_0_1 = q[0];
  wire [2:0] q_slice_1_4 = q[3:1];
  wire q_slice_3_4 = q[3];
  wire [2:0] q_slice_0_3 = q[2:0];

  wire [3:0] tmp0 = {q_slice_1_4, q_slice_0_1};
  wire [3:0] tmp1 = {q_slice_0_3, q_slice_3_4};

  wire [3:0] new_q = dir ? tmp0 : tmp1;

  always @(posedge clk)
    if (reset) begin
      q <= 4'b0;
    end else begin
      q <= new_q;
    end

endmodule;

===

(defmodule counter
  [:output [x ((uintm 8) 0)]]
  (connect x (inc x)))

===

module counter(
  clock,
  reset,
  x
);
  input wire clock;
  input wire reset;

  output reg [7:0] x;

  wire [7:0] inc_x = x + 1;

  always @(posedge clk)
    if (reset) begin
      reg <= 8'b0;
    end else begin
      x <= inc_x;
    end

endmodule;

===

(def e (enum #{:a :b :c}))
(def b (bundle {:car e :cdr (uintm 4)}))
(def u (union {:x (uintm 5) :y b))

(defmodule union-test
  [:outputs [v (u {:x ((uintm 5) 0)})
             o ((uintm 5) 22)]]
    (union-match v
      (:x x
          (connect o 22)
          (connect v (cast u {:y {:car :b 
                                  :cdr 3}})))
      (:y {:keys [car cdr]}
          (connect o 33)
          (mux2 (< cdr 7)
                (connect v (cast u {:y {:car :c 
                                        :cdr (inc cdr)}}))
                (connect v (cast u {:x ((uintm 5) 3)}))))))

===
;lowir forms of union-match expr
(connect o (union-match v
              (:x x 22)
              (:y _ 33)))
(connect v (union-match v
              (:x x (cast u {:y {:car :b :cdr 3}}))
              (:y {:keys [car cdr]}
                (mux2 (< cdr 7)
                  (cast u {:y {car :c :cdr (inc cdr)}})
                  (cast u {:x ((uintm 5) 3))))))
===
(connect o (mux2 (= :x (get-tag v)) 22 33))
(connect v (mux2 (= :x (get-tag v))
             #b1_01_0011
             (mux2 (< cdr 7)
               #b0_00011_0
               (bit-cat #b1_10 (serialize (inc cdr))))))
===

module union_test(
  clock,
  reset,
  v,
  o
);
  input wire clock;
  input wire reset;

  output reg [6:0] v;
  output reg [4:0] o;

  wire v_tag = v[6];
  wire v_tag_is_x = v_tag == 1'b0;

  wire [4:0] tmp0 = v_tag_is_x ? 22 : 33;

  wire [3:0] cdr = v[3:0];
  wire [3:0] cdr_inc = cdr + 1;

  wire [6:0] tmp1 = {3'b110,cdr_inc};

  wire cdr_lt_7 = cdr < 7;
  wire [6:0] tmp2 = cdr_lt_7 ? 7'b0000110 : tmp1;
  wire [6:0] tmp3 = v_tag_is_x ? 7'b1010011 : tmp2;

  always @(posedge clk)
    if (reset) begin
      v <= 7'b0;
      o <= 5'b0;
    end else begin
      v <= tmp3;
      o <= tmp0;
    end
endmodule;
